{"ast":null,"code":"var _jsxFileName = \"/home/fernanda/Documents/projects/us-civics-test-prep/src/components/Quiz.js\";\nimport React, { Component } from 'react';\nimport { qBank } from './quizData';\n\nclass Quiz extends Component {\n  constructor() {\n    super();\n\n    this.loadQuiz = () => {\n      this.setState(() => {\n        return {\n          questions: qBank[this.state.currentQuestion].question,\n          options: qBank[this.state.currentQuestion].options,\n          answer: qBank[this.state.currentQuestion].answer\n        };\n      });\n    };\n\n    this.handleClick = () => {\n      const _this$state = this.state,\n            userAnswer = _this$state.userAnswer,\n            answer = _this$state.answer,\n            score = _this$state.score;\n\n      if (userAnswer === answer) {\n        this.setState({\n          score: score + 1\n        });\n      }\n\n      this.setState({\n        currentQuestion: this.state.currentQuestion + 1\n      });\n      console.log(this.state.currentQuestion);\n    };\n\n    this.checkAnswer = answer => {\n      this.setState({\n        userAnswer: answer,\n        disabled: false\n      });\n    };\n\n    this.finishQuiz = () => {\n      if (this.state.currentQuestion === qBank.length - 1) {\n        this.setState({\n          end: true\n        });\n      }\n    };\n\n    this.playAgain = () => {\n      this.setState({\n        userAnswer: null,\n        currentQuestion: 0,\n        options: [],\n        end: false,\n        score: 0,\n        disabled: true\n      });\n    };\n\n    this.state = {\n      userAnswer: null,\n      currentQuestion: 0,\n      options: [],\n      end: false,\n      score: 0,\n      disabled: true\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.checkAnswer = this.checkAnswer.bind(this);\n    this.finishQuiz = this.finishQuiz.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadQuiz();\n  }\n\n  // updates component\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentQuestion !== prevState.currentQuestion) {\n      this.setState(() => {\n        return {\n          disabled: true,\n          questions: qBank[this.state.currentQuestion].question,\n          options: qBank[this.state.currentQuestion].options,\n          answer: qBank[this.state.currentQuestion].answer\n        };\n      });\n    }\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          questions = _this$state2.questions,\n          options = _this$state2.options,\n          userAnswer = _this$state2.userAnswer,\n          currentQuestion = _this$state2.currentQuestion,\n          end = _this$state2.end;\n\n    if (end) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Game Over! \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), \" Your final score is \", this.state.score), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"The Correct Answers for the Questions were:\", React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, qBank.map((item, index) => React.createElement(\"li\", {\n        className: \"ui floating message options\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, item.answer))), React.createElement(\"button\", {\n        className: \"ui inverted button\",\n        onClick: this.playAgain,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Play Again\")));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, questions), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Questions \".concat(currentQuestion, \" out of \").concat(qBank.length - 1)), options.map(option => React.createElement(\"p\", {\n        key: option.id,\n        className: \"ui floating message options \\n            \".concat(userAnswer === option ? \"selected\" : null),\n        onClick: () => this.checkAnswer(option),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, option)), currentQuestion < qBank.length - 1 && React.createElement(\"button\", {\n        className: \"ui inverted button\",\n        disabled: this.state.disabled,\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Next\"), currentQuestion === qBank.length - 1 && React.createElement(\"button\", {\n        className: \"ui inverted button\",\n        onClick: this.finishQuiz,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Finish\"));\n    }\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/fernanda/Documents/projects/us-civics-test-prep/src/components/Quiz.js"],"names":["React","Component","qBank","Quiz","constructor","loadQuiz","setState","questions","state","currentQuestion","question","options","answer","handleClick","userAnswer","score","console","log","checkAnswer","disabled","finishQuiz","length","end","playAgain","bind","componentDidMount","componentDidUpdate","prevProps","prevState","render","map","item","index","option","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { qBank } from './quizData'\n\nclass Quiz extends Component {\n  constructor() {\n    super()\n    this.state = {\n      userAnswer: null,\n      currentQuestion: 0,\n      options: [],\n      end: false,\n      score: 0,\n      disabled: true\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.checkAnswer = this.checkAnswer.bind(this);\n    this.finishQuiz = this.finishQuiz.bind(this);\n\n  }\n\n  loadQuiz = () => {\n    this.setState(() => {\n      return {\n        questions: qBank[this.state.currentQuestion].question,\n        options: qBank[this.state.currentQuestion].options,\n        answer: qBank[this.state.currentQuestion].answer\n      }\n    })\n  };\n\n  componentDidMount() {\n    this.loadQuiz()\n  }\n\n  handleClick = () => {\n    const { userAnswer, answer, score } = this.state;\n\n    if (userAnswer === answer) {\n      this.setState({\n        score: score + 1\n      })\n    }\n\n    this.setState({\n      currentQuestion: this.state.currentQuestion + 1\n    })\n    console.log(this.state.currentQuestion)\n  }\n\n  // updates component\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentQuestion !== prevState.currentQuestion) {\n      this.setState(() => {\n        return {\n          disabled: true,\n          questions: qBank[this.state.currentQuestion].question,\n          options: qBank[this.state.currentQuestion].options,\n          answer: qBank[this.state.currentQuestion].answer\n        }\n      })\n    }\n  }\n\n  checkAnswer = answer => {\n    this.setState({\n      userAnswer: answer,\n      disabled: false\n    })\n  }\n\n  finishQuiz = () => {\n    if (this.state.currentQuestion === qBank.length - 1) {\n      this.setState({\n        end: true\n      })\n    }\n  }\n\n  playAgain = () => {\n    this.setState({\n      userAnswer: null,\n      currentQuestion: 0,\n      options: [],\n      end: false,\n      score: 0,\n      disabled: true\n    })\n  }\n\n  render() {\n    const { questions, options, userAnswer, currentQuestion, end } = this.state;\n    if (end) {\n      return (\n      <div>\n        <h2>\n          Game Over! <br /> Your final score is {this.state.score}\n        </h2>\n        <div>The Correct Answers for the Questions were: \n        <ul>\n          {qBank.map((item, index) => (\n            <li className=\"ui floating message options\" key={index}>{item.answer}</li>\n          ))}\n        </ul>\n        <button \n            className='ui inverted button'\n            onClick={this.playAgain}>Play Again</button>\n        </div>\n      </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <h1>{questions}</h1>\n          <span>{`Questions ${currentQuestion} out of ${qBank.length - 1}`}</span>\n          {options.map(option => (\n            <p\n              key={option.id}\n              className={`ui floating message options \n            ${userAnswer === option ? \"selected\" : null}`}\n              onClick={() => this.checkAnswer(option)}>\n              {option}\n            </p>\n          ))}\n          {currentQuestion < qBank.length - 1 && (\n            <button\n              className='ui inverted button'\n              disabled={this.state.disabled}\n              onClick={this.handleClick}>\n              Next\n            </button>\n          )}\n          {currentQuestion === qBank.length - 1 && (\n            <button \n            className='ui inverted button'\n            onClick={this.finishQuiz}>Finish</button>\n          )}\n        </div>\n      );\n    }  \n  }\n\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}